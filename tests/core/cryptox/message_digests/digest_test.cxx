// [===========================================================================]
// [                               C r y p t o x                               ]
// [---------------------------------------------------------------------------]
// [                                                                           ]
// [                          Copyright (C) 2016-2017                          ]
// [                      Rodrigo Madera <madera@acm.org>                      ]
// [                                                                           ]
// [---------------------------------------------------------------------------]
// [         Distributed under the Boost Software License, Version 1.0         ]
// [ Read accompanying LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt ]
// [===========================================================================]

// TODO: Add an explicit test for cryptox::digester<> class.

#include "pch.hxx"
#include <cryptox/message_digests/digest.hxx>
#include <cryptox/detail/make_random_string.hxx>
#include <cryptox/detail/ifstream_size.hxx>
using namespace cryptox;

static const std::string empty_string;
static const std::string lazy_dog = "The quick brown fox jumps over the lazy dog";

#define CHECK_DIGEST(algorithm, input, expected) \
	BOOST_CHECK(digest<algorithm>(&input[0], input.size()) == expected); \
	BOOST_CHECK(digest<algorithm>(input.c_str())           == expected); \
	BOOST_CHECK(digest<algorithm>(input)                   == expected);

BOOST_AUTO_TEST_CASE(md5_digest_test) {
	{
		const md5::digest_type expected = {{
			0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04,
			0xe9, 0x80, 0x09, 0x98, 0xec, 0xf8, 0x42, 0x7e
		}};

		CHECK_DIGEST(md5, empty_string, expected);
	}
	{
		const md5::digest_type expected = {{
			0x9e, 0x10, 0x7d, 0x9d, 0x37, 0x2b, 0xb6, 0x82,
			0x6b, 0xd8, 0x1d, 0x35, 0x42, 0xa4, 0x19, 0xd6
		}};

		CHECK_DIGEST(md5, lazy_dog, expected);
	}
}
/*
BOOST_AUTO_TEST_CASE(sha_digest_test) {
	{
		const sha::digest_type expected = {{
			0xf9, 0x6c, 0xea, 0x19, 0x8a, 0xd1, 0xdd, 0x56,
			0x17, 0xac, 0x08, 0x4a, 0x3d, 0x92, 0xc6, 0x10,
			0x77, 0x08, 0xc0, 0xef
		}};

		CHECK_DIGEST(sha, empty_string, expected);
	}
	{
		const sha::digest_type expected = {{
			0xb0, 0x3b, 0x40, 0x1b, 0xa9, 0x2d, 0x77, 0x66,
			0x62, 0x21, 0xe8, 0x43, 0xfe, 0xeb, 0xf8, 0xc5,
			0x61, 0xce, 0xa5, 0xf7
		}};

		CHECK_DIGEST(sha, lazy_dog, expected);
	}
}
*/
BOOST_AUTO_TEST_CASE(sha1_digest_test) {
	{
		const sha1::digest_type expected = {{
			0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d,
			0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90,
			0xaf, 0xd8, 0x07, 0x09
		}};

		CHECK_DIGEST(sha1, empty_string, expected);
	}
	{
		const sha1::digest_type expected = {{
			0x2f, 0xd4, 0xe1, 0xc6, 0x7a, 0x2d, 0x28, 0xfc,
			0xed, 0x84, 0x9e, 0xe1, 0xbb, 0x76, 0xe7, 0x39,
			0x1b, 0x93, 0xeb, 0x12
		}};

		CHECK_DIGEST(sha1, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha224_digest_test) {
	{
		const sha224::digest_type expected = {{
			0xd1, 0x4a, 0x02, 0x8c, 0x2a, 0x3a, 0x2b, 0xc9,
			0x47, 0x61, 0x02, 0xbb, 0x28, 0x82, 0x34, 0xc4,
			0x15, 0xa2, 0xb0, 0x1f, 0x82, 0x8e, 0xa6, 0x2a,
			0xc5, 0xb3, 0xe4, 0x2f
		}};

		CHECK_DIGEST(sha224, empty_string, expected);
	}
	{
		const sha224::digest_type expected = {{
			0x73, 0x0e, 0x10, 0x9b, 0xd7, 0xa8, 0xa3, 0x2b,
			0x1c, 0xb9, 0xd9, 0xa0, 0x9a, 0xa2, 0x32, 0x5d,
			0x24, 0x30, 0x58, 0x7d, 0xdb, 0xc0, 0xc3, 0x8b,
			0xad, 0x91, 0x15, 0x25
		}};

		CHECK_DIGEST(sha224, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha256_digest_test) {
	{
		const sha256::digest_type expected = {{
			0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
			0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
			0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
			0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
		}};

		CHECK_DIGEST(sha256, empty_string, expected);
	}
	{
		const sha256::digest_type expected = {{
			0xd7, 0xa8, 0xfb, 0xb3, 0x07, 0xd7, 0x80, 0x94,
			0x69, 0xca, 0x9a, 0xbc, 0xb0, 0x08, 0x2e, 0x4f,
			0x8d, 0x56, 0x51, 0xe4, 0x6d, 0x3c, 0xdb, 0x76,
			0x2d, 0x02, 0xd0, 0xbf, 0x37, 0xc9, 0xe5, 0x92
		}};

		CHECK_DIGEST(sha256, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha384_digest_test) {
	{
		const sha384::digest_type expected = {{
			0x38, 0xb0, 0x60, 0xa7, 0x51, 0xac, 0x96, 0x38,
			0x4c, 0xd9, 0x32, 0x7e, 0xb1, 0xb1, 0xe3, 0x6a,
			0x21, 0xfd, 0xb7, 0x11, 0x14, 0xbe, 0x07, 0x43,
			0x4c, 0x0c, 0xc7, 0xbf, 0x63, 0xf6, 0xe1, 0xda,
			0x27, 0x4e, 0xde, 0xbf, 0xe7, 0x6f, 0x65, 0xfb,
			0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b
		}};

		CHECK_DIGEST(sha384, empty_string, expected);
	}
	{
		const sha384::digest_type expected = {{
			0xca, 0x73, 0x7f, 0x10, 0x14, 0xa4, 0x8f, 0x4c,
			0x0b, 0x6d, 0xd4, 0x3c, 0xb1, 0x77, 0xb0, 0xaf,
			0xd9, 0xe5, 0x16, 0x93, 0x67, 0x54, 0x4c, 0x49,
			0x40, 0x11, 0xe3, 0x31, 0x7d, 0xbf, 0x9a, 0x50,
			0x9c, 0xb1, 0xe5, 0xdc, 0x1e, 0x85, 0xa9, 0x41,
			0xbb, 0xee, 0x3d, 0x7f, 0x2a, 0xfb, 0xc9, 0xb1
		}};

		CHECK_DIGEST(sha384, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha512_digest_test) {
	{
		const sha512::digest_type expected = {{
			0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
			0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
			0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
			0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
			0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
			0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
			0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
			0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e
		}};

		CHECK_DIGEST(sha512, empty_string, expected);
	}
	{
		const sha512::digest_type expected = {{
			0x07, 0xe5, 0x47, 0xd9, 0x58, 0x6f, 0x6a, 0x73,
			0xf7, 0x3f, 0xba, 0xc0, 0x43, 0x5e, 0xd7, 0x69,
			0x51, 0x21, 0x8f, 0xb7, 0xd0, 0xc8, 0xd7, 0x88,
			0xa3, 0x09, 0xd7, 0x85, 0x43, 0x6b, 0xbb, 0x64,
			0x2e, 0x93, 0xa2, 0x52, 0xa9, 0x54, 0xf2, 0x39,
			0x12, 0x54, 0x7d, 0x1e, 0x8a, 0x3b, 0x5e, 0xd6,
			0xe1, 0xbf, 0xd7, 0x09, 0x78, 0x21, 0x23, 0x3f,
			0xa0, 0x53, 0x8f, 0x3d, 0xb8, 0x54, 0xfe, 0xe6
		}};

		CHECK_DIGEST(sha512, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha3_224_digest_test) {
	{
		const sha3_224::digest_type expected = {{
    		0x6B, 0x4E, 0x03, 0x42, 0x36, 0x67, 0xDB, 0xB7, 
			0x3B, 0x6E, 0x15, 0x45, 0x4F, 0x0E, 0xB1, 0xAB,
    		0xD4, 0x59, 0x7F, 0x9A, 0x1B, 0x07, 0x8E, 0x3F, 
			0x5B, 0x5A, 0x6B, 0xC7
		}};

		CHECK_DIGEST(sha3_224, empty_string, expected);
	}
	{
		const sha3_224::digest_type expected = {{
			0xD1, 0x5D, 0xAD, 0xCE, 0xAA, 0x4D, 0x5D, 0x7B, 
			0xB3, 0xB4, 0x8F, 0x44, 0x64, 0x21, 0xD5, 0x42,
    		0xE0, 0x8A, 0xD8, 0x88, 0x73, 0x05, 0xE2, 0x8D, 
			0x58, 0x33, 0x57, 0x95
		}};

		CHECK_DIGEST(sha3_224, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha3_256_digest_test) {
	{
		const sha3_256::digest_type expected = {{
    		0xA7, 0xFF, 0xC6, 0xF8, 0xBF, 0x1E, 0xD7, 0x66, 
			0x51, 0xC1, 0x47, 0x56, 0xA0, 0x61, 0xD6, 0x62,
    		0xF5, 0x80, 0xFF, 0x4D, 0xE4, 0x3B, 0x49, 0xFA, 
			0x82, 0xD8, 0x0A, 0x4B, 0x80, 0xF8, 0x43, 0x4A
		}};

		CHECK_DIGEST(sha3_256, empty_string, expected);
	}
	{
		const sha3_256::digest_type expected = {{
    		0x69, 0x07, 0x0D, 0xDA, 0x01, 0x97, 0x5C, 0x8C, 
			0x12, 0x0C, 0x3A, 0xAD, 0xA1, 0xB2, 0x82, 0x39,
    		0x4E, 0x7F, 0x03, 0x2F, 0xA9, 0xCF, 0x32, 0xF4, 
			0xCB, 0x22, 0x59, 0xA0, 0x89, 0x7D, 0xFC, 0x04
		}};

		CHECK_DIGEST(sha3_256, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha3_384_digest_test) {
	{
		const sha3_384::digest_type expected = {{
			0x0C, 0x63, 0xA7, 0x5B, 0x84, 0x5E, 0x4F, 0x7D, 
			0x01, 0x10, 0x7D, 0x85, 0x2E, 0x4C, 0x24, 0x85,
    		0xC5, 0x1A, 0x50, 0xAA, 0xAA, 0x94, 0xFC, 0x61, 
			0x99, 0x5E, 0x71, 0xBB, 0xEE, 0x98, 0x3A, 0x2A,
    		0xC3, 0x71, 0x38, 0x31, 0x26, 0x4A, 0xDB, 0x47, 
			0xFB, 0x6B, 0xD1, 0xE0, 0x58, 0xD5, 0xF0, 0x04
		}};

		CHECK_DIGEST(sha3_384, empty_string, expected);
	}
	{
		const sha3_384::digest_type expected = {{
			0x70, 0x63, 0x46, 0x5E, 0x08, 0xA9, 0x3B, 0xCE, 
			0x31, 0xCD, 0x89, 0xD2, 0xE3, 0xCA, 0x8F, 0x60,
    		0x24, 0x98, 0x69, 0x6E, 0x25, 0x35, 0x92, 0xED, 
			0x26, 0xF0, 0x7B, 0xF7, 0xE7, 0x03, 0xCF, 0x32,
    		0x85, 0x81, 0xE1, 0x47, 0x1A, 0x7B, 0xA7, 0xAB, 
			0x11, 0x9B, 0x1A, 0x9E, 0xBD, 0xF8, 0xBE, 0x41
		}};

		CHECK_DIGEST(sha3_384, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha3_512_digest_test) {
	{
		const sha3_512::digest_type expected = {{
			0xA6, 0x9F, 0x73, 0xCC, 0xA2, 0x3A, 0x9A, 0xC5, 
			0xC8, 0xB5, 0x67, 0xDC, 0x18, 0x5A, 0x75, 0x6E,
    		0x97, 0xC9, 0x82, 0x16, 0x4F, 0xE2, 0x58, 0x59, 
			0xE0, 0xD1, 0xDC, 0xC1, 0x47, 0x5C, 0x80, 0xA6,
    		0x15, 0xB2, 0x12, 0x3A, 0xF1, 0xF5, 0xF9, 0x4C, 
			0x11, 0xE3, 0xE9, 0x40, 0x2C, 0x3A, 0xC5, 0x58,
    		0xF5, 0x00, 0x19, 0x9D, 0x95, 0xB6, 0xD3, 0xE3, 
			0x01, 0x75, 0x85, 0x86, 0x28, 0x1D, 0xCD, 0x26
		}};

		CHECK_DIGEST(sha3_512, empty_string, expected);
	}
	{
		const sha3_512::digest_type expected = {{
    		0x01, 0xDE, 0xDD, 0x5D, 0xE4, 0xEF, 0x14, 0x64, 
			0x24, 0x45, 0xBA, 0x5F, 0x5B, 0x97, 0xC1, 0x5E,
    		0x47, 0xB9, 0xAD, 0x93, 0x13, 0x26, 0xE4, 0xB0, 
			0x72, 0x7C, 0xD9, 0x4C, 0xEF, 0xC4, 0x4F, 0xFF,
    		0x23, 0xF0, 0x7B, 0xF5, 0x43, 0x13, 0x99, 0x39, 
			0xB4, 0x91, 0x28, 0xCA, 0xF4, 0x36, 0xDC, 0x1B,
    		0xDE, 0xE5, 0x4F, 0xCB, 0x24, 0x02, 0x3A, 0x08, 
			0xD9, 0x40, 0x3F, 0x9B, 0x4B, 0xF0, 0xD4, 0x50
		}};

		CHECK_DIGEST(sha3_512, lazy_dog, expected);
	}
}



#ifndef CRYPTOX_NO_IFSTREAM

BOOST_AUTO_TEST_CASE(simple_ifstream_digest_test) {
	const std::string filename = detail::make_random_string();

	/* Create temporary file */ {
		std::ofstream output_file(filename);
		if (!output_file)
			throw std::runtime_error("Failed to create file for tests.");

		output_file << lazy_dog;
		output_file.close();
	}

	/* Digest the file */ {
		std::ifstream input_file(filename);
		if (!input_file)
			throw std::runtime_error("Failed to open test file.");

		const sha512::digest_type expected = {{
			0x07, 0xe5, 0x47, 0xd9, 0x58, 0x6f, 0x6a, 0x73,
			0xf7, 0x3f, 0xba, 0xc0, 0x43, 0x5e, 0xd7, 0x69,
			0x51, 0x21, 0x8f, 0xb7, 0xd0, 0xc8, 0xd7, 0x88,
			0xa3, 0x09, 0xd7, 0x85, 0x43, 0x6b, 0xbb, 0x64,
			0x2e, 0x93, 0xa2, 0x52, 0xa9, 0x54, 0xf2, 0x39,
			0x12, 0x54, 0x7d, 0x1e, 0x8a, 0x3b, 0x5e, 0xd6,
			0xe1, 0xbf, 0xd7, 0x09, 0x78, 0x21, 0x23, 0x3f,
			0xa0, 0x53, 0x8f, 0x3d, 0xb8, 0x54, 0xfe, 0xe6
		}};

		BOOST_CHECK(digest<sha512>(input_file) == expected);
		input_file.close();

		std::remove(filename.c_str());
	}
}

BOOST_AUTO_TEST_CASE(blob_ifstream_digest_test) {
	int rounds = 2;
	while (rounds--) {
		const size_t blob_size = 1*1024*1024;

		const std::string filename = detail::make_random_string();
		std::vector<std::ofstream::char_type> v(blob_size);

		/* Create temporary file */ {
			std::ofstream output_file(filename);
			if (!output_file)
				throw std::runtime_error("Failed to create file for tests.");

			for (int i=0; i<v.size(); ++i)
				v[i] = rand()%255;

			if (!output_file.write(&v[0], v.size()))
				throw std::runtime_error("Failed to write test file.");

			output_file.close();
		}

		/* Digest the file */ {
			std::ifstream input_file(filename);
			const size_t file_size = detail::ifstream_size(input_file);
			if (!input_file)
				throw std::runtime_error("Failed to open test file.");

			const sha512::digest_type expected = digest<sha512>(v);

			BOOST_CHECK(digest<sha512>(input_file) == expected);
			input_file.close();

			std::remove(filename.c_str());
		}
	}
}

#endif // CRYPTOX_NO_IFSTREAM
